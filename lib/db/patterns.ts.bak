// KV Key Patterns
// Standardized key patterns for all entity types in masmaCMS

import type { Locale, UUID } from "@/types";

export const KeyPatterns = {
  // User Management
  users: {
    byId: (id: UUID) => ["users", id],
    byEmail: (email: string) => ["users_by_email", email.toLowerCase()],
    byUsername: (
      username: string,
    ) => ["users_by_username", username.toLowerCase()],
    sessions: (
      userId: UUID,
      sessionId: UUID,
    ) => ["users", userId, "sessions", sessionId],
    preferences: (userId: UUID) => ["users", userId, "preferences"],
    roles: (userId: UUID) => ["users", userId, "roles"],
    all: () => ["users"],
  },

  // Role Management
  roles: {
    byId: (id: UUID) => ["roles", "id", id],
    byName: (name: string) => ["roles", "name", name],
    permissions: (roleId: UUID) => ["roles", "permissions", roleId],
    all: () => ["roles"],
  },

  // Session Management
  sessions: {
    byId: (sessionId: UUID) => ["sessions", sessionId],
    byUserId: (userId: UUID) => ["sessions_by_user", userId],
    byToken: (token: string) => ["sessions_by_token", token],
    active: () => ["sessions", "active"],
    all: () => ["sessions"],
  },

  // Content Management
  content: {
    byId: (id: UUID) => ["content", id],
    bySlug: (slug: string, locale?: Locale) =>
      locale ? ["content_by_slug", locale, slug] : ["content_by_slug", slug],
    byType: (contentType: string) => ["content_by_type", contentType],
    byAuthor: (authorId: UUID) => ["content_by_author", authorId],
    byStatus: (status: string) => ["content_by_status", status],
    byLocale: (locale: Locale) => ["content_by_locale", locale],
    versions: (contentId: UUID) => ["content", contentId, "versions"],
    version: (
      contentId: UUID,
      version: number,
    ) => ["content", contentId, "versions", version],
    comments: (contentId: UUID) => ["content", contentId, "comments"],
    analytics: (contentId: UUID) => ["content", contentId, "analytics"],
    relationships: (contentId: UUID) => ["content", contentId, "relationships"],
    translations: (contentId: UUID) => ["content", contentId, "translations"],
    all: () => ["content"],
    published: () => ["content", "published"],
    drafts: () => ["content", "drafts"],
  },

  // Content Schema Management
  schemas: {
    byId: (id: UUID) => ["schemas", id],
    byName: (name: string) => ["schemas_by_name", name],
    fields: (schemaId: UUID) => ["schemas", schemaId, "fields"],
    all: () => ["schemas"],
  },

  // Media Management
  media: {
    byId: (id: UUID) => ["media", id],
    byFolder: (folderId: UUID) => ["media_by_folder", folderId],
    byType: (mimeType: string) => ["media_by_type", mimeType],
    byUploader: (uploaderId: UUID) => ["media_by_uploader", uploaderId],
    metadata: (mediaId: UUID) => ["media", mediaId, "metadata"],
    variants: (mediaId: UUID) => ["media", mediaId, "variants"],
    usage: (mediaId: UUID) => ["media", mediaId, "usage"],
    all: () => ["media"],
  },

  // Media Folders
  folders: {
    byId: (id: UUID) => ["folders", id],
    byParent: (parentId: UUID) => ["folders_by_parent", parentId],
    byPath: (path: string) => ["folders_by_path", path],
    children: (folderId: UUID) => ["folders", folderId, "children"],
    all: () => ["folders"],
    root: () => ["folders", "root"],
  },

  // System Settings
  settings: {
    system: () => ["settings", "system"],
    email: () => ["settings", "email"],
    seo: () => ["settings", "seo"],
    cache: () => ["settings", "cache"],
    security: () => ["settings", "security"],
    byKey: (key: string) => ["settings", key],
    all: () => ["settings"],
  },

  // Organization & Multi-tenancy Management
  organization: {
    // Core organization patterns
    byId: (id: UUID) => ["organization", id],
    bySlug: (slug: string) => ["organization_by_slug", slug],
    byDomain: (domain: string) => ["organization_by_domain", domain],
    byOwner: (
      ownerId: UUID,
      orgId: UUID,
    ) => ["organization_by_owner", ownerId, orgId],
    byStatus: (
      status: string,
      orgId: UUID,
    ) => ["organization_by_status", status, orgId],
    byPlan: (
      plan: string,
      orgId: UUID,
    ) => ["organization_by_plan", plan, orgId],

    // Team management
    team: (id: UUID) => ["organization", "team", id],
    teamByOrg: (
      orgId: UUID,
      teamId: UUID,
    ) => ["organization_team_by_org", orgId, teamId],
    teamByCreator: (
      creatorId: UUID,
      teamId: UUID,
    ) => ["organization_team_by_creator", creatorId, teamId],
    defaultTeam: (orgId: UUID) => ["organization_default_team", orgId],

    // Team membership
    teamMember: (id: UUID) => ["organization", "team_member", id],
    teamMemberByTeam: (
      teamId: UUID,
      memberId: UUID,
    ) => ["organization_team_member_by_team", teamId, memberId],
    teamMemberByUser: (
      userId: UUID,
      memberId: UUID,
    ) => ["organization_team_member_by_user", userId, memberId],
    teamMemberByOrg: (
      orgId: UUID,
      memberId: UUID,
    ) => ["organization_team_member_by_org", orgId, memberId],

    // Invitations
    invitation: (id: UUID) => ["organization", "invitation", id],
    invitationByOrg: (
      orgId: UUID,
      invitationId: UUID,
    ) => ["organization_invitation_by_org", orgId, invitationId],
    invitationByEmail: (
      email: string,
      invitationId: UUID,
    ) => ["organization_invitation_by_email", email, invitationId],
    invitationByToken: (
      token: string,
    ) => ["organization_invitation_by_token", token],

    // API Keys
    apiKey: (id: UUID) => ["organization", "api_key", id],
    apiKeyByOrg: (
      orgId: UUID,
      keyId: UUID,
    ) => ["organization_api_key_by_org", orgId, keyId],
    apiKeyByHash: (
      keyHash: string,
    ) => ["organization_api_key_by_hash", keyHash],
    apiKeyByCreator: (
      creatorId: UUID,
      keyId: UUID,
    ) => ["organization_api_key_by_creator", creatorId, keyId],

    // Audit logs
    auditLog: (id: UUID) => ["organization", "audit_log", id],
    auditLogByOrg: (
      orgId: UUID,
      logId: UUID,
    ) => ["organization_audit_log_by_org", orgId, logId],
    auditLogByUser: (
      userId: UUID,
      logId: UUID,
    ) => ["organization_audit_log_by_user", userId, logId],
    auditLogByAction: (
      action: string,
      logId: UUID,
    ) => ["organization_audit_log_by_action", action, logId],
    auditLogByDate: (
      year: number,
      month: number,
      day: number,
      logId: UUID,
    ) => ["organization_audit_log_by_date", year, month, day, logId],

    // Analytics
    analytics: (
      orgId: UUID,
      period: string,
    ) => ["organization", "analytics", orgId, period],

    // Settings and configuration
    setting: (
      orgId: UUID,
      category: string,
      key: string,
    ) => ["organization", "setting", orgId, category, key],

    // Webhooks
    webhook: (id: UUID) => ["organization", "webhook", id],
    webhookByOrg: (
      orgId: UUID,
      webhookId: UUID,
    ) => ["organization_webhook_by_org", orgId, webhookId],
  },

  // Plugin System Management
  plugins: {
    // Core plugin patterns
    byId: (id: UUID) => ["plugin", id],
    byManifestId: (
      manifestId: string,
      pluginId: UUID,
    ) => ["plugin_by_manifest", manifestId, pluginId],
    byOrg: (orgId: UUID, pluginId: UUID) => ["plugin_by_org", orgId, pluginId],
    byUser: (
      userId: UUID,
      pluginId: UUID,
    ) => ["plugin_by_user", userId, pluginId],
    byStatus: (
      status: string,
      pluginId: UUID,
    ) => ["plugin_by_status", status, pluginId],

    // Plugin manifests
    manifest: (id: string) => ["plugin_manifest", id],
    manifestByType: (
      type: string,
      manifestId: string,
    ) => ["plugin_manifest_by_type", type, manifestId],
    manifestByCategory: (
      category: string,
      manifestId: string,
    ) => ["plugin_manifest_by_category", category, manifestId],
    manifestByAuthor: (
      author: string,
      manifestId: string,
    ) => ["plugin_manifest_by_author", author, manifestId],

    // Hook system
    hook: (id: UUID) => ["plugin_hook", id],
    hookByPlugin: (
      pluginId: string,
      hookId: UUID,
    ) => ["plugin_hook_by_plugin", pluginId, hookId],
    hookByName: (
      hookName: string,
      hookId: UUID,
    ) => ["plugin_hook_by_name", hookName, hookId],

    // Plugin events and lifecycle
    event: (id: UUID) => ["plugin_event", id],
    eventByPlugin: (
      pluginId: string,
      eventId: UUID,
    ) => ["plugin_event_by_plugin", pluginId, eventId],
    eventByType: (
      eventType: string,
      eventId: UUID,
    ) => ["plugin_event_by_type", eventType, eventId],

    // Plugin audit logs
    audit: (id: UUID) => ["plugin_audit", id],
    auditByPlugin: (
      pluginId: string,
      auditId: UUID,
    ) => ["plugin_audit_by_plugin", pluginId, auditId],
    auditByUser: (
      userId: UUID,
      auditId: UUID,
    ) => ["plugin_audit_by_user", userId, auditId],
    auditByOrg: (
      orgId: UUID,
      auditId: UUID,
    ) => ["plugin_audit_by_org", orgId, auditId],

    // Plugin registry and store
    registry: () => ["plugin_registry"],
    category: (id: string) => ["plugin_category", id],

    // Plugin storage (plugin-specific data)
    storage: (
      pluginId: string,
      key: string,
    ) => ["plugin_storage", pluginId, key],

    // Plugin configuration
    config: (pluginId: string, key: string) => ["plugin_config", pluginId, key],
  },

  // Enhanced Workflow Management
  workflow: {
    // Templates
    template: (id: UUID) => ["workflow", "template", id],
    templateByOrganization: (
      orgId: UUID,
      templateId: UUID,
    ) => ["workflow", "template_by_org", orgId, templateId],
    templateByCreator: (
      creatorId: UUID,
      templateId: UUID,
    ) => ["workflow", "template_by_creator", creatorId, templateId],
    defaultTemplate: (
      templateId: UUID,
    ) => ["workflow", "default_template", templateId],

    // Instances
    instance: (id: UUID) => ["workflow", "instance", id],
    instanceByContent: (
      contentId: UUID,
      instanceId: UUID,
    ) => ["workflow", "instance_by_content", contentId, instanceId],
    instanceByTemplate: (
      templateId: UUID,
      instanceId: UUID,
    ) => ["workflow", "instance_by_template", templateId, instanceId],
    instanceByInitiator: (
      initiatorId: UUID,
      instanceId: UUID,
    ) => ["workflow", "instance_by_initiator", initiatorId, instanceId],
    instanceByStatus: (
      status: string,
      instanceId: UUID,
    ) => ["workflow", "instance_by_status", status, instanceId],
    instanceByAssignee: (
      assigneeId: UUID,
      instanceId: UUID,
    ) => ["workflow", "instance_by_assignee", assigneeId, instanceId],

    // Actions
    action: (id: UUID) => ["workflow", "action", id],
    actionByWorkflow: (
      workflowId: UUID,
      actionId: UUID,
    ) => ["workflow", "action_by_workflow", workflowId, actionId],
    actionByUser: (
      userId: UUID,
      actionId: UUID,
    ) => ["workflow", "action_by_user", userId, actionId],

    // Comments
    comment: (id: UUID) => ["workflow", "comment", id],
    commentByWorkflow: (
      workflowId: UUID,
      commentId: UUID,
    ) => ["workflow", "comment_by_workflow", workflowId, commentId],
    commentByMention: (
      mentionedUserId: UUID,
      commentId: UUID,
    ) => ["workflow", "comment_by_mention", mentionedUserId, commentId],

    // Assignments
    assignment: (id: UUID) => ["workflow", "assignment", id],
    assignmentByWorkflow: (
      workflowId: UUID,
      assignmentId: UUID,
    ) => ["workflow", "assignment_by_workflow", workflowId, assignmentId],
    assignmentByAssignee: (
      assigneeId: UUID,
      assignmentId: UUID,
    ) => ["workflow", "assignment_by_assignee", assigneeId, assignmentId],

    // Tasks
    task: (id: UUID) => ["workflow", "task", id],
    taskByWorkflow: (
      workflowId: UUID,
      taskId: UUID,
    ) => ["workflow", "task_by_workflow", workflowId, taskId],
    taskByAssignee: (
      assigneeId: UUID,
      taskId: UUID,
    ) => ["workflow", "task_by_assignee", assigneeId, taskId],

    // Notifications
    notification: (id: UUID) => ["workflow", "notification", id],
    notificationByRecipient: (
      recipientId: UUID,
      notificationId: UUID,
    ) => ["workflow", "notification_by_recipient", recipientId, notificationId],
    notificationByWorkflow: (
      workflowId: UUID,
      notificationId: UUID,
    ) => ["workflow", "notification_by_workflow", workflowId, notificationId],

    // Real-time Collaboration
    activeUsers: (workflowId: UUID) => ["workflow", "active_users", workflowId],
    lock: (id: UUID) => ["workflow", "lock", id],
    lockByWorkflow: (
      workflowId: UUID,
      lockId: UUID,
    ) => ["workflow", "lock_by_workflow", workflowId, lockId],

    // Activity
    activity: (id: UUID) => ["workflow", "activity", id],
    activityByWorkflow: (
      workflowId: UUID,
      activityId: UUID,
    ) => ["workflow", "activity_by_workflow", workflowId, activityId],

    // Conflicts
    conflict: (id: UUID) => ["workflow", "conflict", id],
    conflictByWorkflow: (
      workflowId: UUID,
      conflictId: UUID,
    ) => ["workflow", "conflict_by_workflow", workflowId, conflictId],

    // Analytics
    analytics: (
      templateId?: UUID,
      period?: string,
    ) => ["workflow", "analytics", templateId || "all", period || "all"],

    // Legacy patterns for backward compatibility
    byId: (id: UUID) => ["workflows", id],
    byName: (name: string) => ["workflows_by_name", name],
    stages: (workflowId: UUID) => ["workflows", workflowId, "stages"],
    forContentType: (
      contentType: string,
    ) => ["workflows_by_content_type", contentType],
    active: () => ["workflows", "active"],
    all: () => ["workflows"],
  },

  // Content Workflow States (Legacy - keeping for backward compatibility)
  contentWorkflows: {
    byId: (id: UUID) => ["content_workflows", id],
    byContent: (contentId: UUID) => ["content_workflows_by_content", contentId],
    byWorkflow: (
      workflowId: UUID,
    ) => ["content_workflows_by_workflow", workflowId],
    byAssignee: (
      assigneeId: UUID,
    ) => ["content_workflows_by_assignee", assigneeId],
    byStage: (stage: string) => ["content_workflows_by_stage", stage],
    history: (
      contentWorkflowId: UUID,
    ) => ["content_workflows", contentWorkflowId, "history"],
    all: () => ["content_workflows"],
  },

  // Internationalization
  translations: {
    byKey: (key: string, locale: Locale) => ["translations", locale, key],
    byNamespace: (
      namespace: string,
      locale: Locale,
    ) => ["translations", locale, "namespace", namespace],
    byLocale: (locale: Locale) => ["translations", locale],
    namespaces: () => ["translation_namespaces"],
    locales: (localeCode?: string) =>
      localeCode ? ["locales", localeCode] : ["locales"],
    memory: (
      sourceLocale: Locale,
      targetLocale: Locale,
    ) => ["translation_memory", sourceLocale, targetLocale],
    all: () => ["translations"],
  },

  // Translation Memory
  translationMemory: {
    byId: (id: UUID) => ["translation_memory", id],
    byHash: (
      hash: string,
      sourceLocale: Locale,
      targetLocale: Locale,
    ) => ["translation_memory_by_hash", hash, sourceLocale, targetLocale],
    byLocales: (
      sourceLocale: Locale,
      targetLocale: Locale,
    ) => ["translation_memory_by_locales", sourceLocale, targetLocale],
    byQuality: (
      quality: "verified" | "reviewed" | "unverified",
    ) => ["translation_memory_by_quality", quality],
    all: () => ["translation_memory"],
  },

  // Team Management
  teams: {
    byId: (id: UUID) => ["teams", id],
    byName: (name: string) => ["teams_by_name", name.toLowerCase()],
    members: (teamId: UUID) => ["teams", teamId, "members"],
    permissions: (teamId: UUID) => ["teams", teamId, "permissions"],
    projects: (teamId: UUID) => ["teams", teamId, "projects"],
    all: () => ["teams"],
  },

  // API Keys
  apiKeys: {
    byId: (id: UUID) => ["api_keys", "id", id],
    byKey: (hashedKey: string) => ["api_keys", "key", hashedKey],
    byUserId: (userId: UUID) => ["api_keys", "by_user", userId],
    active: () => ["api_keys", "active"],
    all: () => ["api_keys"],
    usage: (
      keyId: UUID,
      usageId: UUID,
    ) => ["api_keys", "usage", keyId, usageId],
    usageByKey: (keyId: UUID) => ["api_keys", "usage", keyId],
    rateLimit: (
      keyId: UUID,
      window: string,
    ) => ["api_keys", "rate_limit", keyId, window],
  },

  // Webhooks
  webhooks: {
    endpoints: {
      byId: (id: UUID) => ["webhook_endpoints", id],
      byUrl: (url: string) => ["webhook_endpoints_by_url", url],
      active: () => ["webhook_endpoints", "active"],
      all: () => ["webhook_endpoints"],
    },
    events: {
      byId: (id: UUID) => ["webhook_events", id],
      byEndpoint: (
        endpointId: UUID,
      ) => ["webhook_events_by_endpoint", endpointId],
      byStatus: (status: string) => ["webhook_events_by_status", status],
      pending: () => ["webhook_events", "pending"],
      failed: () => ["webhook_events", "failed"],
      all: () => ["webhook_events"],
    },
  },

  // Audit Logging
  auditLogs: {
    byId: (id: UUID) => ["audit_logs", id],
    byUserId: (userId: UUID) => ["audit_logs_by_user", userId],
    byAction: (action: string) => ["audit_logs_by_action", action],
    byEntity: (
      entityType: string,
      entityId: UUID,
    ) => ["audit_logs_by_entity", entityType, entityId],
    byDate: (
      year: number,
      month: number,
      day: number,
    ) => ["audit_logs_by_date", year, month, day],
    recent: () => ["audit_logs", "recent"],
    all: () => ["audit_logs"],
  },

  // Plugin Management
  plugins: {
    byId: (id: UUID) => ["plugins", id],
    byName: (name: string) => ["plugins_by_name", name],
    active: () => ["plugins", "active"],
    config: (pluginId: UUID) => ["plugins", pluginId, "config"],
    data: (pluginId: UUID, key: string) => ["plugins", pluginId, "data", key],
    all: () => ["plugins"],
  },

  // Search Indexes
  search: {
    content: (
      locale: Locale,
      term: string,
    ) => ["search", "content", locale, term],
    users: (term: string) => ["search", "users", term],
    media: (term: string) => ["search", "media", term],
    fullText: (
      entityType: string,
      term: string,
    ) => ["search", "fulltext", entityType, term],
    tags: (tag: string) => ["search", "tags", tag],
  },

  // Cache Management
  cache: {
    byKey: (key: string) => ["cache", key],
    byTags: (tag: string) => ["cache_by_tag", tag],
    content: (contentId: UUID, locale?: Locale) =>
      locale
        ? ["cache", "content", contentId, locale]
        : ["cache", "content", contentId],
    api: (
      endpoint: string,
      params: string,
    ) => ["cache", "api", endpoint, params],
    all: () => ["cache"],
  },

  // Background Jobs
  jobs: {
    byId: (id: UUID) => ["jobs", id],
    byType: (type: string) => ["jobs_by_type", type],
    byStatus: (status: string) => ["jobs_by_status", status],
    queue: (queue: string) => ["jobs", "queue", queue],
    scheduled: () => ["jobs", "scheduled"],
    failed: () => ["jobs", "failed"],
    all: () => ["jobs"],
  },

  // Analytics
  analytics: {
    content: (
      contentId: UUID,
      period: string,
    ) => ["analytics", "content", contentId, period],
    site: (period: string) => ["analytics", "site", period],
    users: (period: string) => ["analytics", "users", period],
    api: (period: string) => ["analytics", "api", period],
    events: (
      event: string,
      period: string,
    ) => ["analytics", "events", event, period],
  },

  // Temporary data (with expiration)
  temp: {
    passwordReset: (token: string) => ["temp", "password_reset", token],
    emailVerification: (token: string) => ["temp", "email_verification", token],
    uploads: (sessionId: string) => ["temp", "uploads", sessionId],
    previews: (contentId: UUID) => ["temp", "previews", contentId],
  },

  // User Roles (Many-to-Many relationship)
  userRoles: {
    byUserRole: (userId: UUID, roleId: UUID) => ["user_roles", userId, roleId],
    byUser: (userId: UUID) => ["user_roles", "by_user", userId],
    byRole: (roleId: UUID) => ["user_roles", "by_role", roleId],
  },
} as const;

// Utility functions for key manipulation
export class KeyBuilder {
  static join(...parts: (string | number | undefined)[]): string[] {
    return parts.filter((p) => p !== undefined).map((p) => String(p));
  }

  static pattern(pattern: string[], ...args: (string | number)[]): string[] {
    let argIndex = 0;
    return pattern.map((part) => {
      if (part.startsWith(":")) {
        return String(args[argIndex++]);
      }
      return part;
    });
  }

  static validate(key: string[]): boolean {
    // Validate key structure
    if (!Array.isArray(key) || key.length === 0) {
      return false;
    }

    // Check for valid characters in key parts
    return key.every((part) =>
      typeof part === "string" &&
      part.length > 0 &&
      /^[a-zA-Z0-9_-]+$/.test(part)
    );
  }

  static toPrefix(key: string[]): string[] {
    return key;
  }
}

// Export type-safe key builders
export type KeyPattern = typeof KeyPatterns;
export type EntityType = keyof typeof KeyPatterns;

// Main export for use in repositories
export const DbPatterns = KeyPatterns;
